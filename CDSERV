#! /bin/bash

# Ce script implémente un serveur.  
# Le script doit être invoqué avec l'argument :                                                              
# PORT   le port sur lequel le serveur attend ses clients  

if [ $# -ne 1 ]; then
    echo "usage: $(basename $0) PORT"
    exit -1
fi


PORT="$1"

# Déclaration du tube

FIFO="/tmp/$USER-fifo-$$"

# Il faut détruire le tube quand le serveur termine pour éviter de
# polluer /tmp.  On utilise pour cela une instruction trap pour être sur de
# nettoyer même si le serveur est interrompu par un signal.

function nettoyage() { rm -f "$FIFO"; }
trap nettoyage EXIT #QUand on va quitter le server il va y avoir un exit qui est envoyé et le trap quand il verra le exit il va executer nettoyage

#trap fonction EXIT: des que le programme execute EXIT

# on crée le tube nommé

[ -e "FIFO" ] || mkfifo "$FIFO"


function accept-loop() {
    while true; do
	interaction < "$FIFO" | netcat -kl -p "$PORT" > "$FIFO"
    done
}

# La fonction interaction lit les commandes du client sur entrée standard 
# et envoie les réponses sur sa sortie standard. 
#
# 	CMD arg1 arg2 ... argn                   
#                     
# alors elle invoque la fonction :
#                                                                            
#         commande-CMD arg1 arg2 ... argn                                      
#                                                                              
# si elle existe; sinon elle envoie une réponse d'erreur.                     

modeBrowse=false

function interaction() {
    local cmd args arg1
    while true; do
	read cmd args arg1 || exit -1
	fun="commande-$cmd"
	
	if [ "$(type -t $fun)" = "function" ]; then 
	#Si la chaine de caractere est bien une fonction préalablement définie
		$fun $args
	else
	    commande-non-comprise $fun $args
	fi
    done
}
# Les fonctions implémentant les différentes commandes du serveur

function commande-non-comprise () {
	echo $mode
   echo "Le serveur ne peut pas interpréter cette commande"
}

# On accepte et traite les connexions

function commande-echo () {

	if [ $args="bonjour" ];then
	
		echo "Bonjour, je suis à votre service"
	else
		echo "TU veux quoi"
	fi

	}


function commande-convert () {
	echo $args | tr [a-z] [A-Z]
}

function commande-convert2 () {
	echo $* | awk'{print toupper($0)}'
}

function commande-extinction () {
	sleep 10
	shutdown -r
}

function commande-touch () {
	if [ -f $1 ];then
		echo "dsl fichier deja exitant"
	else
		touch $1
		echo blabla > $1
	fi
	}

function commande-list () {

	ls=$(ls ~/projet/archive)
	if [ -n "$ls" ]; then
		echo -e "\nLes archives existantes sont: \n\n$ls"
	else
		echo "Pas d'archive dans ce serveur"
	fi
}

function commande-create () {

	#cmd contiens le mode
	#echo $cmd

	#args contient le nom de l'archive
	#echo -e "$args je suis args\n\n\n\n\n"

	#arg1 contient le path du directory je sais pas pourquoi
	#echo -e "$arg1 JE suis arg1\n\n\n\n\n"

	#arg2 contient le contenu du fichier

	mv $args $(pwd)/archive/$args
	
}

function commande-extract () {

	#echo "$args est args" 
	arch=$(echo $args)
	#echo "$arch je suis l'archive"
	sed 's/\\/\//g' archive/$arch > archExtract
	cat archExtract
	rm archExtract
	
}

#function commande-vsh () {
#	
#	if [ $# -ne 0 ];then
#		if [ "$mode" = "-list" ];then
#			ls=$(ls ~/projet/archive)
#			if [ -n "$ls" ];then
#				echo -e "\nLes archives existantes sont:\n\n$ls"
#			else
#				echo "Pas d'archive dans ce serveur"
#			fi
#			
#		elif [ "$1" = "-browse" ];then
#			modeBrowse=true	
#			echo -n "vsh:>"
#
#		elif [ "$1" = "-create" ]; then
#				
#			for i in $(ls $(pwd)/archive)
#			do
#				if [ -d $i ]; then
#					echo "Directory: $(pwd)/$i/"
#					"rechercheDossier"
#
#				fi
#				set -- $(ls -l | grep $i)
#				
#				echo $9 $1 $5
#	
#			done
#
#
#		fi
#		
#	else
#		echo "Rentre une commande"
#	fi
#}



function rechercheDossier () { 
	for i in $(ls)
	do
		echo "Directory: $(pwd)/$i"
		set --$(ls -l | grep $i)
		echo $9 $1 $5

	done


}


repcourant=""


function commande-cat () {
	cat $1

}



function commande-browse () {
	echo $args
	repcourant=$(cat archive/$args | head -3 | tail -1 | cut -d' ' -f2)
	while true; do
	echo -n "vsh:>"
	read arg fichier option
	if [ "$arg" = "pwd" ]; then
	commande-pwd $repcourant
	elif [ "$arg" = "ls" ]; then
		commande-ls $args $fichier $repcourant $option
	elif [ "$arg" = "cat" ]; then
		commande-cat $args $fichier $option $repcourant
	elif [ "$arg" = "rm" ]; then
		commande-rm $args $fichier $repcourant
	elif [ "$arg" = "cd" ];then
		commande-cd $args $fichier
	fi
	done
}


function commande-ls () {

#path=$(sed -n "3 p" archive/$args | cut -d' ' -f2)
path=$repcourant
echo "$repcourant je suis repcourant dans le ls"
sed 's/\\/\\\\/g' archive/$args > lsarch
while read ligne 
do
set -- $ligne
if [[ "$fichier" = "" || "$fichier" = "-l" ]]; then
	if [ "$ligne" = "@" ]; then
		break
	else
		#echo "$3 je suis 3"
		if [[ ! "$3" = "" ]];then
			if [ "$fichier" = "-l" ]; then
				echo "$2 $3 $1"
			else
				if [[ "$2" =~ ^d ]]; then
				echo -n "$1\ "
				else
					droit=$(echo $2 | cut -c4)
					if [[ "$droit" = "x" ]]; then
						echo -n "$1* "
					else
						echo -n "$1 "
					fi
				fi
			fi
		fi
	fi
else
	fichier=$(echo $fichier | sed 's/\//\\/g')
	if [[ "$path" = "$repcourant" ]];then
	pathls=$(echo $repcourant$fichier | sed 's/\\/\\\\/g')
	else
	pathls=$(echo $repcourant\\$fichier | sed 's/\\/\\\\/g')
	fi
	li=$(grep -n "${pathls}$" archive/$args | head -1 | cut -d':' -f1)
	if [ "$li" = "" ]; then
		echo "ls : cannot access '$fichier' : No such file or directory"
		break
	else

		#finli=$(head -$i archive/$args | grep -n "@$" archive/$args | cut -d':' -f1)
		#echo "$finli je suis finili"
		sed -n "$li,$ p" archive/$args > bouclels
		while read ligne; do
			if [ "$ligne" = "@" ]; then
			finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
			#finli=$(grep -n "^@$" archive/$args | cut -d':' -f1 | head -1)
			finli=$(echo "$(($finli+$li))")
			break
			fi
		done < bouclels
		finli=$(($finli-2))
		li=$(($li+1))
		sed -n "$li, $finli p" archive/$args > echols
		while read ligne; do
			set -- $ligne
			if [[ "$2" =~ ^d ]]; then
				echo -n "$1\ "
			else
				droit=$(echo $2 | cut -c4)
				if [[ "$droit" = "x" ]]; then
					echo -n "$1* "
				else
					echo -n "$1 "
				fi
			fi
		done < echols
		#rm echols
		rm bouclels
		break
	fi 	
fi	
#if [[ $ligne =~ ^directory ]]; then
#	set $ligne
#	if [ "$fichier" = "" ]; then
#		echo "ls normal"
#	else 
#		if [ "$2" = "$fichier" ];then
#			echo $ligne
#		fi 
#	fi 
#fi

done < lsarch
echo -e "\n"
rm lsarch

}

function commande-cd () {
	
	#Tester si le dossier existe
	oldrepcour=${repcourant%\*}
	echo "$oldrepcour je suis l'ancien"
	
	chemincomp=$(echo "$repcourant\\$fichier")
	cheminmodif=$(echo $chemincomp | sed 's.\\.\\\\.g')
	
		if grep -q "^directory $cheminmodif" $(pwd)/archive/$args ; then
			present="ok"
		fi

		
		if [ "$present" = "ok" -a "$fichier" != "" -a "$fichier" != ".." ] ; then
			oldrepcour=$repcourant
			#echo "$oldrepcour je suis le nouveau ancien"
			repcourant="$repcourant\\$fichier"
			#echo "$chemincomp je susi chemincomp"
			#echo "$cheminmodif je suis lenouv chemin modif"
			echo "$repcourant"
			echo "je suis là"
			present="ko"
		elif [ "$fichier" != ".." ];then
			oldrepcour=$repcourant
			echo "$repcourant\\$fichier N'est pas un dossier dans $args"
			
		fi
	
		if [ "$fichier" = ".." ];then
			echo "$oldrepcour je susi le old"
			repcourant=${repcourant%\\*}
			echo "tu as ecrit .. et l'ancien chemin est $repcourant"
		fi
		
}




function commande-pwd () {
	echo "Le rep courant est $repcourant"
	
}


accept-loop
