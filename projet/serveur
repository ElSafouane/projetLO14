#! /bin/bash

# Ce script implémente un serveur.  
# Le script doit être invoqué avec l'argument :                                                              
# PORT   le port sur lequel le serveur attend ses clients  

if [ $# -ne 1 ]; then
    echo "usage: $(basename $0) PORT"
    exit -1
fi


PORT="$1"

# Déclaration du tube

FIFO="/tmp/$USER-fifo-$$"

# Il faut détruire le tube quand le serveur termine pour éviter de
# polluer /tmp.  On utilise pour cela une instruction trap pour être sur de
# nettoyer même si le serveur est interrompu par un signal.

function nettoyage() { rm -f "$FIFO"; }
trap nettoyage EXIT #QUand on va quitter le server il va y avoir un exit qui est envoyé et le trap quand il verra le exit il va executer nettoyage

#trap fonction EXIT: des que le programme execute EXIT

# on crée le tube nommé

[ -e "FIFO" ] || mkfifo "$FIFO"


function accept-loop() {
    while true; do
	interaction < "$FIFO" | netcat -kl -p "$PORT" > "$FIFO"
    done
}
                 
function interaction() {
    local cmd args arg1
    while true; do
	read cmd args arg1 || exit -1
	fun="commande-$cmd"
	
	if [ "$(type -t $fun)" = "function" ]; then 
		$fun $args
	else
	    commande-non-comprise $fun $args
	fi
    done
}

function commande-non-comprise () {
	echo $mode
   echo "Le serveur ne peut pas interpréter cette commande"
}

function commande-echo () {

	if [ $args="bonjour" ];then
	
		echo "Bonjour, je suis à votre service"
	else
		echo "TU veux quoi"
	fi

	}


function commande-convert () {
	echo $args | tr [a-z] [A-Z]
}

function commande-convert2 () {
	echo $* | awk'{print toupper($0)}'
}

function commande-extinction () {
	sleep 10
	shutdown -r
}

function commande-touch () {
	if [ -f $1 ];then
		echo "dsl fichier deja exitant"
	else
		touch $1
		echo blabla > $1
	fi
	}

function commande-list () {

	ls=$(ls ~/projet/archive)
	if [ -n "$ls" ]; then
		echo -e "\nLes archives existantes sont: \n\n$ls"
	else
		echo "Pas d'archive dans ce serveur"
	fi
}

function commande-create () {

	mv $args archive/$args
	
}

function commande-extract () {

	arch=$(echo $args)
	sed 's/\\/\//g' archive/$arch > archExtract
	cat archExtract
	rm archExtract
	
}


function rechercheDossier () { 
	for i in $(ls)
	do
		echo "Directory: $(pwd)/$i"
		set --$(ls -l | grep $i)
		echo $9 $1 $5

	done


}



function commande-browse () {
	repcourant=$(cat archive/$args | head -3 | tail -1 | cut -d' ' -f2)
	racine=$(cat archive/$args | head -3 | tail -1 | cut -d' ' -f2)
	while true; do
	echo -n "vsh:>"
	read -r arg fichier option
	if [ "$arg" = "pwd" ]; then
		commande-pwd $repcourant
	elif [ "$arg" = "ls" ]; then
		commande-ls $args $fichier $repcourant $option
	elif [ "$arg" = "cat" ]; then
		commande-cat $args $fichier $option $repcourant
	elif [ "$arg" = "rm" ]; then
		commande-rm $args $fichier $repcourant
	elif [ "$arg" = "cd" ];then
		commande-cd $args $fichier $racine
	elif [ "$arg" = "touch" ];then
		commande-touch $args $fichier $repcourant
	elif [ "$arg" = "mkdir" ];then
		commande-mkdir $args $fichier $repcourant $option
	fi
	done
}


function commande-pwd () {
	echo "$repcourant"
}

function commande-ls () {

sed 's/\\/\\\\/g' archive/$args > lsarch
while read ligne 
do
set -- $ligne
if [[ "$fichier" = "" || "$fichier" = "-l" || "$fichier" = "-a" || "$fichier" = "-al" ]]; then
	pathls=$(echo $repcourant | sed 's/\\/\\\\/g')
	li=$(grep -n "${pathls}$" archive/$args | head -1 | cut -d':' -f1)

		sed -n "$li,$ p" archive/$args > bouclels
		while read ligne; do
			if [ "$ligne" = "@" ]; then
			finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
			finli=$(echo "$(($finli+$li))")
			break
			fi
		done < bouclels
		finli=$(($finli-2))
		li=$(($li+1))
		sed -n "$li, $finli p" archive/$args > echols
		while read ligne; do
			set -- $ligne
			if [ "$fichier" = "-l" ]; then
				if [[ "$1" =~ ^[^\.] ]];then
					echo "$2 $3 $1"
				fi
			elif [ "$fichier" = "-al" ]; then
					echo "$2 $3 $1"
			elif [ "$fichier" = "-a" ]; then
				if [[ "$2" =~ ^d ]]; then
				echo -n "$1\ "
				else
					droit=$(echo $2 | cut -c4)
					if [[ "$droit" = "x" ]]; then
						echo -n "$1* "
					else
						echo -n "$1 "
					fi
				fi
			else 
				if [[ "$1" =~ ^[^\.] ]]; then
					if [[ "$2" =~ ^d ]]; then
						echo -n "$1\ "
					else
						droit=$(echo $2 | cut -c4)
						if [[ "$droit" = "x" ]]; then
							echo -n "$1* "
						else
							echo -n "$1 "
						fi
					fi
				fi
			fi
		done < echols
		rm echols
		rm bouclels
		break
else
	if [[ "$repcourant" =~ \\$ ]];then
	pathls=$(echo $repcourant$fichier | sed 's/\\/\\\\/g')
	else
	pathls=$(echo $repcourant\\$fichier | sed 's/\\/\\\\/g')
	fi
	li=$(grep -n "${pathls}$" archive/$args | head -1 | cut -d':' -f1)
	if [ "$li" = "" ]; then
		echo "ls : cannot access '$fichier' : No such file or directory"
		break
	else
		sed -n "$li,$ p" archive/$args > bouclels
		while read ligne; do
			if [ "$ligne" = "@" ]; then
			finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
			finli=$(echo "$(($finli+$li))")
			break
			fi
		done < bouclels
		finli=$(($finli-2))
		li=$(($li+1))
		sed -n "$li, $finli p" archive/$args > echols
		while read ligne; do
			set -- $ligne
			if [ "$option" = "-l" ]; then
				if [[ "$1" =~ ^[^\.] ]]; then
					echo "$2 $3 $1"
				fi
			elif [ "$option" = "-al" ]; then							
				echo "$2 $3 $1"
			elif [ "$option" = "-a" ]; then
				if [[ "$2" =~ ^d ]]; then
				echo -n "$1\ "
				else
					droit=$(echo $2 | cut -c4)
					if [[ "$droit" = "x" ]]; then
						echo -n "$1* "
					else
						echo -n "$1 "
					fi
				fi
			else 
				if [[ "$1" =~ ^[^\.] ]]; then
					if [[ "$2" =~ ^d ]]; then
						echo -n "$1\ "
					else
						droit=$(echo $2 | cut -c4)
						if [[ "$droit" = "x" ]]; then
							echo -n "$1* "
						else
							echo -n "$1 "
						fi
					fi
				fi


			fi 
		done < echols
		rm echols
		rm bouclels
		break
	fi 	
fi	

done < lsarch
echo -e "\n"
rm lsarch

}

function commande-cat () {

sed 's/\\/\\\\/g' archive/$args > lsarch
while read ligne 
do
set -- $ligne
if [[ "$fichier" = "" ]]; then
	echo "Usage cat fich"
	break
else

	li=$(grep -n "^${fichier} " archive/$args | head -1 | cut -d':' -f1)
	if [ "$li" = "" ]; then
		echo "cat: $fichier: No such file or directory"
		break
	else
		if [[ ! "$option" = "" ]]; then
			li2=$(grep -n "^${option} " archive/$args | head -1 | cut -d':' -f1)
			if [ "$li2" = "" ]; then
				echo "cat: $option: No such file or directory"
				break
			fi
		fi
		repc=$(echo $repcourant | sed 's/\\/\\\\/g')
		repc=$(grep -n "${repc}$" archive/$args | head -1 | cut -d':' -f1)
		sed -n "$repc,$ p" archive/$args > bouclels
		while read ligne; do
			if [ "$ligne" = "@" ]; then
			finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
			finli=$(echo "$(($finli+$repc))")
			break
			fi
		done < bouclels
		finli=$(($finli-2))
		repc=$(($repc+1))
		sed -n "$repc, $finli p" archive/$args | cut -d' ' -f1 > echols
		verif=0
		verif2=0
		while read ligne; do
			if [ "$option" = "" ];then
				if [[ $ligne =~ ^${fichier}$ ]]; then
					verif=1
				fi
			elif [[ "$option" = "$fichier" ]]; then
				if [[ $ligne =~ ^${fichier}$ ]]; then
					verif=1
					verif2=1
				fi
			else
				if [[ $ligne =~ ^${fichier}$ ]]; then
					verif=1
				elif [[ $ligne =~ ^${option}$ ]]; then
					verif2=1
				fi
			fi
		done < echols
		rm bouclels
		rm echols
		if [[ "$option" = "" ]]; then	
			if [[ "$verif" = 0 ]]; then
				echo "cat: $fichier: No such file or directory"
				break
			else
				sed -n "$li p" archive/$args > tempcat
				while read ligne; do
					set -- $ligne
					deb=$4
					long=$5
				done < tempcat
				rm tempcat
				if [[ "$deb" = "" ]]; then
					echo "cat: $fichier: Is a directory"
					break
				elif [[ "$long" = "" || "$long" = 0 ]]; then
					break
				else 
					deb_body=$(cat archive/$args | head -1 | cut -d':' -f2)		
					deb=$(($deb+$deb_body-1))
					fin=$(($deb+$long-1))
					sed -n "$deb, $fin p" archive/$args
					break
				fi
			fi
		else
			if [[ "$verif" = 0 ]]; then
				echo "cat: $fichier: No such file or directory"
				break
			elif [[ "$verif2" = 0 ]]; then
				echo "cat: $option: No such file or directory"
				break
			else
				sed -n "$li p" archive/$args > tempcat
				while read ligne; do
					set -- $ligne
					deb=$4
					long=$5
				done < tempcat
				rm tempcat
				sed -n "$li2 p" archive/$args > tempcat2
				while read ligne; do
					set -- $ligne
					deb2=$4
					long2=$5
				done < tempcat2
				rm tempcat2
				deb_body=$(cat archive/$args | head -1 | cut -d':' -f2)						
				if [[ "$deb" = "" ]]; then
					echo "cat: $fichier: Is a directory"
					break
				elif [[ "$deb2" = "" ]];then
					echo "cat: $option: Is a directory"
					break
				elif [[ "$long" = "" || "$long" = 0 ]]; then
					if [[ "$long2" != "" || "$long2" != 0 ]];then
						deb2=$(($deb2+$deb_body-1))
						fin2=$(($deb2+$long2-1))
						sed -n "$deb2, $fin2 p" archive/$args
					fi
					break
				elif [[ "$long2" = "" || "$long2" = 0 ]]; then
					deb=$(($deb+$deb_body-1))
					fin=$(($deb+$long-1))
					sed -n "$deb, $fin p" archive/$args
					break
				else 
					deb_body=$(cat archive/$args | head -1 | cut -d':' -f2)		
					deb=$(($deb+$deb_body-1))
					fin=$(($deb+$long-1))
					sed -n "$deb, $fin p" archive/$args

					deb2=$(($deb2+$deb_body-1))
					fin2=$(($deb2+$long2-1))
					sed -n "$deb2, $fin2 p" archive/$args
					break
				fi
				
				
			fi	
		fi
	fi		
fi	

done < lsarch
rm lsarch

}


function commande-rm () {
sed 's/\\/\\\\/g' archive/$args | cut -d' ' -f1 > lsarch
fichierrm=$(echo $fichier)
verifrm=$(grep -n "$fichierrm " archive/$args | head -1 | cut -d':' -f2 | cut -d' ' -f2)
if [[ "$verifrm" =~ ^d ]]; then
	rmdir=1
else
	rmdir=0
fi
while read ligne 
do
	set -- $ligne
	if [[ "$fichier" = "" ]]; then
		break
	else
		if [[ "$fichier" =~ \\+ ]]; then
			fichier=${fichier##*\\}
		fi	
		li=$(grep -n "$fichier " archive/$args | cut -d':' -f1)
		if [ "$li" = "" ]; then
			break
		else
			if [[ $fichierrm =~ \\+ ]]; then
				reprm=${fichierrm%\\*}
				if [[ "$repcourant" =~ \\$ ]];then
					repc=$(echo $repcourant$reprm | sed 's/\\/\\\\/g')
				else
					repc=$(echo $repcourant\\$reprm | sed 's/\\/\\\\/g')
				fi
				repc=$(grep -n "${repc}$" archive/$args | cut -d':' -f1)
			else
				if [[ "$rmdir" = 1 ]]; then	
					if [[ "$repcourant" =~ \\$ ]];then
						repc=$(echo $repcourant$fichierrm | sed 's/\\/\\\\/g')
					else
						repc=$(echo $repcourant\\$fichierrm | sed 's/\\/\\\\/g')
					fi
				else
					repc=$(echo $repcourant | sed 's/\\/\\\\/g')
				fi
				repc=$(grep -n "${repc}$" archive/$args | cut -d':' -f1)
			fi
			sed -n "$repc,$ p" archive/$args > bouclels
			while read ligne; do
				if [ "$ligne" = "@" ]; then
				finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
				finli=$(echo "$(($finli+$repc))")
				break
				fi
			done < bouclels
			if [[ "$rmdir" = 1 ]]; then
				sed -n "$repc p" archive/$args | cut -d' ' -f2 > echols
			else
				finli=$(($finli-2))
				repc=$(($repc+1))
				sed -n "$repc, $finli p" archive/$args | cut -d' ' -f1 > echols
			fi
			verif=0
			sed -i 's/\\/\\\\/g' echols
			while read ligne; do
				if [[ "$rmdir" = 1 ]]; then
					if [[ "$repcourant" =~ \\$ ]];then
						path=$(echo $repcourant$fichierrm)
					else
						path=$(echo $repcourant\\$fichierrm)
					fi
					if [[ "$ligne" = "$path" ]]; then
						verif=1
						break
					fi
				else	
					if [[ $ligne =~ ^${fichier}$ ]]; then
						verif=1
						break
					fi
				fi
			done < echols
			rm bouclels
			rm echols
			if [[ "$verif" = 1 ]]; then
				sed -n "$li p" archive/$args > tempcat
					while read ligne; do
						set -- $ligne
						if [[ "$2" =~ ^d ]]; then
							ok=0
							break
						else 
							ok=1
							break
						fi
					done < tempcat
					rm tempcat
					deb_body=$(cat archive/$args | head -1 | cut -d':' -f2)	
				if [[ "$ok" = 0 ]]; then
					path=$(echo $path | sed 's/\\/\\\\/g')
					debrm=$(grep -n "$path" archive/$args | head -1 | cut -d':' -f1)
					finrm=$(grep -n "$path" archive/$args | tail -1 | cut -d':' -f1)
					sed -n "$finrm,$ p" archive/$args > bouclerm
					while read ligne; do
						if [ "$ligne" = "@" ]; then
						finli=$(grep -n "${ligne}" bouclerm | cut -d':' -f1 | head -1)
						finli=$(echo "$(($finli+$finrm-1))")
						break
						fi
					done < bouclerm
					rm bouclerm
					sed -n "$debrm, $finli p" archive/$args > suppbody
					while read ligne; do
						set -- $ligne 
						if [[ "$2" =~ ^[^d] && "$4" != "" ]]; then
							echo "$4 $5" >> supprm
						fi
					done < suppbody
					lignesupp=$(wc -l suppbody | cut -d' ' -f1)
					if [ -f "supprm" ]; then
						debsupbody=$(cat supprm | head -1 | cut -d' ' -f1)
						finsupbody=$(cat supprm | tail -1 | cut -d' ' -f1)
						verif=$(cat supprm | tail -1 | cut -d' ' -f2)
						if [[ "$debsupbody" = "$finsupbody" ]]; then
							finsupbody=$(cat supprm | head -1 | cut -d' ' -f2)
							finsupbody=$(($debsupbody+$finsupbody-1))
						else
							if [[ "$verif" = "" || "$verif" = 0 ]]; then
								finsupbody=$(($finsupbody-1))
							else
								finsupbody=$(($finsupbody+$verif-1))
							fi
						fi
						debsupbody=$(($debsupbody+$deb_body-1))
						finsupbody=$(($finsupbody+$deb_body-1))
						sed -i "$debsupbody, $finsupbody d" archive/$args
						rm supprm
					fi
						debrm=$(($debrm-1))
						finli=$(($finli-1))
						sed -i "$li d" archive/$args
						sed -i "$debrm,$finli d" archive/$args
						deb_body=$(($deb_body-$lignesupp-1)) 

				else
					lignesupp=$(cat archive/$args | head -1 | cut -d':' -f2)
					sed -n "$li p" archive/$args > suppbody
					while read ligne; do
						set -- $ligne
						echo "$4 $5" > supprm
					done < suppbody
					debsupbody=$(cat supprm | head -1 | cut -d' ' -f1)
					finsupbody=$(cat supprm | tail -1 | cut -d' ' -f2)
					if [[ "$finsupbody" = "" || "$finsupbody" = 0 ]]; then
						sed -i "$li d" archive/$args 
					else
						finsupbody=$(($debsupbody+$finsupbody-1))
						debsupbody=$(($debsupbody+$deb_body-1))
						finsupbody=$(($finsupbody+$deb_body-1))
						sed -i "$debsupbody, $finsupbody d" archive/$args
						sed -i "$li d" archive/$args 
					fi
					deb_body=$(($lignesupp-1))
					rm supprm
				fi
				sed -i "1s/.*/3:$deb_body/" archive/$args
				li=$(echo $li | cut -d' ' -f1)
				#echo $nli
				nli=$(($li-1))
				sed -n "1, $(($nli)) p" archive/$args > majdebbody
				sed -i 's/\\/\\\\/g' majdebbody
				while read ligne; do
					set -- $ligne 
						if [[ "$2" =~ ^[^d] && "$4" != "" ]]; then
							echo "$4 $5" >> majrm
						fi
				done < majdebbody
				if [ -f "majrm" ]; then
					lastdebbody=$(cat majrm | tail -1 | cut -d' ' -f1)
					tailledebbody=$(cat majrm | tail -1 | cut -d' ' -f2)
				rm majrm
				else
					lastdebbody=1
					tailledebbody=0
				fi
				sed -n "$((nli+1)),$(($deb_body-1)) p" archive/$args > majdebbody
				sed -i 's/\\/\\\\/g' majdebbody
				while read ligne; do
					set -- $ligne 
						if [[ "$2" =~ ^[^d] && "$4" != "" ]]; then
							nligne=$(grep -n "${ligne}$" archive/$args | head -1 | cut -d':' -f1)
							if [[ "$tailledebbody" = "" || "$tailledebbody" = 0 ]]; then
								#sed -i "${nligne}s/$4/$lastdebbody/" archive/$args
								#sed -i "s/^\(.+ \{3\}\) ${4}/$lastdebbody/" archive/$args
								echo ""
							else
								lastdebbody=$(($lastdebbody+$tailledebbody))
								#sed -i "s/^\(.+ \{3\}\) ${4}/$lastdebbody/" archive/$args
								#sed -i "s/^\(.+ \{3\}\) [0-9]/$lastdebbody/" archive/$args
							fi
							tailledebbody=$(echo $5)
						fi
				done < majdebbody
				rm majdebbody
				rm suppbody
				break
			else
				echo "rm: cannot remove '$fichierrm': No such file or directory"
				break
			fi		
		fi
	fi
done < lsarch
rm lsarch
}


function commande-cd () {
	oldrepcour=${repcourant%\*}
	if [[ "$repcourant" =~ \\$ ]];then
		chemincomp=$(echo "$repcourant$fichier")
	else
		chemincomp=$(echo "$repcourant\\$fichier")
	fi
	cheminmodif=$(echo $chemincomp | sed 's.\\.\\\\.g')
	
		if grep -q "^directory $cheminmodif" $(pwd)/archive/$args ; then
			present="ok"
		fi		
		if [ "$present" = "ok" -a "$fichier" != "" -a "$fichier" != ".." ] ; then
			if [[ "$repcourant" =~ \\$ ]];then
				repcourant="$repcourant$fichier"
			else
				repcourant="$repcourant\\$fichier"
			fi
			present="ko"
		elif [ "$fichier" != ".." -a "$fichier" != "\\" ]; then
			echo "cd: $fichier: No such file or directory"
		fi
		if [[ "$fichier" = ".." ]]; then
			repcourant=${repcourant%\\*}
			if [[ "$repcourant\\" = "$racine" ]]; then
				repcourant=$(echo "$repcourant\\")
			fi
		elif [[ "$fichier" = "\\" ]]; then
			repcourant=$racine
		fi
		
}



function commande-touch () {

		repc=$(echo $repcourant | sed 's/\\/\\\\/g')
		repc=$(grep -n "${repc}$" archive/$args | head -1 | cut -d':' -f1)
		sed -n "$repc,$ p" archive/$args > bouclels
		while read ligne; do
			if [ "$ligne" = "@" ]; then
			finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
			finli=$(echo "$(($finli+$repc))")
			break
			fi
		done < bouclels
		finli=$(($finli-2))
		repc=$(($repc+1))
		sed -n "$repc, $finli p" archive/$args > echols
		verif=0
		while read ligne; do
			set -- $ligne
			if [[ $1 =~ ^${fichier}$ ]]; then
				verif=1
			fi
		done < echols
		rm bouclels
		rm echols
		if [ "$verif" -eq 1 ];then
			echo "le verof est egala 1"
		else
			((derniereligne=$finli+1))
			sed -n "$finli p" archive/$args > temptouch
			while read ligne;
			do
				set -- $ligne
				((ligneapres=$4+$5))
				((finli=$finli+1))
			done < temptouch
			debutbody=$(head -1 archive/$args | cut -d':' -f2)
			((debutbody=$debutbody+1))
			rm temptouch
			sed -i "$derniereligne i $fichier -rw-rw-r-- 1 $ligneapres 0" archive/$args
			sed -i "1s/.*/3:$debutbody/" archive/$args
		fi

}

function commande-mkdir () {


	#Detecter si le dossier existe déja
		if [[ "$repcourant" =~ \\$ ]];then
		chemincomp=$(echo "$repcourant$fichier")
		else
			chemincomp=$(echo "$repcourant\\$fichier")
		fi
		cheminmodif=$(echo $chemincomp | sed 's.\\.\\\\.g')
		fichiermodif=$(echo $fichier | sed 's.\\.\\\\.g')

		#C'est grace à ça qu'on vérifie si le dossier existe
		if grep -q "^directory $cheminmodif" $(pwd)/archive/$args ; then
			present="ok"
			echo "mkdir: cannot create directory $fichier: File exists"
		else

			#On echange les valeurs de option et fichier si elles sont inversées
			if [ "$fichier" = "-p" ];then
				fichier=$option
				option="-p"
				if [[ "$repcourant" =~ \\$ ]];then
				chemincomp=$(echo "$repcourant$fichier")
				else
					chemincomp=$(echo "$repcourant\\$fichier")
				fi

				#On crée le chemin que le grep va comprendre
				cheminmodif=$(echo $chemincomp | sed 's.\\.\\\\.g')
				fichiermodif=$(echo $fichier | sed 's.\\.\\\\.g')

				

			fi
			

				if [[ "$option" = "-p" ]] && [[ "$fichier" =~ \\+ ]] ;then
					echo "commande en maintenance"
					
				#S'il n'y a pas d'option et que le fichier est un chemin 
				elif [[ "$option" = "" ]] && [[ "$fichier" =~ \\+ ]];then
					echo "mkdir: cannot create directory ‘$fichier’: No such file or directory"


				#S'il n'ya pas d'options alors il crée le dossier normalement
				elif [[ "$option" = "" ]];then			
					repc=$(echo $repcourant | sed 's/\\/\\\\/g')
					repc=$(grep -n "${repc}$" archive/$args | head -1 | cut -d':' -f1)
					sed -n "$repc,$ p" archive/$args > bouclels
					while read ligne; do
						if [ "$ligne" = "@" ]; then
						finli=$(grep -n "${ligne}" bouclels| cut -d':' -f1 | head -1)
						finli=$(echo "$(($finli+$repc))")
						break
						fi
					done < bouclels
					finli=$(($finli-2))
					repc=$(($repc+1))
					sed -n "$repc, $finli p" archive/$args | cut -d' ' -f1 > echols
					verif=0
					while read ligne; do
							if [[ $ligne =~ ^${fichier}$ ]]; then
								verif=1
						fi
					done < echols
					rm bouclels
					rm echols

					#Il rajoute la ligne du dossier dans le repertoire père
					sed -i "$repc i $fichier drwxrwxr-x 4096" archive/$args
					((debutdos=$finli+2))


					#Il crée la ligne du dossier avec les @
					sed -i "$debutdos i @\ndirectory $cheminmodif" archive/$args

					debutbody=$(head -1 archive/$args | cut -d':' -f2)
					((debutbody=$debutbody+3))
					
					#Modification de la premiere ligne du fichier
					sed -i "1s/.*/3:$debutbody/" archive/$args
						
				fi

		fi 

}

accept-loop
